package terrapeer.vui.j3dui.control.inputs.sensors;

import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;

import terrapeer.vui.j3dui.utils.Debug;
import terrapeer.vui.j3dui.control.inputs.*;

/**
Abstract base class for sensing AWT inputs (mouse, keyboard,
window) in a view's display.  Subclasses must override
mouse???() and key???() methods to handle AWT events for
sensor event detection, interpretation, and output.
<P>
Events generated by displays other than the one monitored by
this sensor are rejected.  Because of inconsistencies in how
the AWT reports keyboard events during a drag a null display
(i.e. monitor all canavs3D displays) should be used for keyboard
modifier sensors.
<P>
AWT button events only report the button that changed, not the
complete new button state.  AWT keyboard events report the
complete new state, not the key that changed.  And, there is
no way to query for the current button or modifier state.  As
a convenience this sensor monitors the complete button and
modifier state, regardless of source display, which can be
obtained through getButton() and getModifier().
<P>
Do NOT use setEnable() on this Behavior.  It will not have the
desired affect and will corrupt some of the framework input
events.
<P>
After this class was developed it was revealed by Sun that
behaviors are no longer needed (they think) for handling AWT
events.  Not using Behaviors would simplify input sensor
construction and would facilitate monitoring multiple displays.

@deprecated Eliminated to conform with
new pattern for AWT-based event sensors.

@author Jon Barrilleaux,
copyright (c) 1999 Jon Barrilleaux,
All Rights Reserved.
*/

public abstract class InputSensor extends Behavior {
	
	// public interface =========================================

	/**
	Constructs an InputSensor that monitors the specified source
	display.  If a host group is specified then this node will
	be automatically added to it.
	@param display Source display.  If null events from all
	displays will be reported.
	@param host Group node to host this Behavior.  Null if none,
	but this sensor must be added to the scene graph to work.
	*/
	public InputSensor(Canvas3D display, Group host) {
		if(host!=null) host.addChild(this);		 
		_display = display;
	
		// setup behavior
		WakeupCondition wakeup = buildWakeup();
		
		/// add events for button and modifier monitoring
		Vector wakeupVect = new Vector();
		Enumeration wakeupEnum = wakeup.allElements();
		while(wakeupEnum.hasMoreElements()) {
			wakeupVect.add(wakeupEnum.nextElement());
		}
		
		wakeupVect.add(new WakeupOnAWTEvent(
		 MouseEvent.MOUSE_PRESSED));
		wakeupVect.add(new WakeupOnAWTEvent(
		 MouseEvent.MOUSE_RELEASED));
		wakeupVect.add(new WakeupOnAWTEvent(
		 KeyEvent.KEY_PRESSED));
		wakeupVect.add(new WakeupOnAWTEvent(
		 KeyEvent.KEY_RELEASED));
		
		_wakeup = new WakeupOr((WakeupCriterion[])
		 wakeupVect.toArray(new WakeupCriterion[0]));

		// note: for AWT events Behavior ignores bound size		
		setSchedulingBounds(new BoundingSphere(
		 new Point3d(0.0,0.0,0.0), Double.POSITIVE_INFINITY));
		
		setEnable(true);
	}

	/**
	Gets the source display being monitored.
	@return Reference to the source display.  Null if all
	displays are being monitored.
	*/
	public Canvas3D getDisplay() {
		return _display;
	}

	/**
	Gets the current button state of the mouse regardless of
	source display.
	@return Mouse button state (Input.BUTTON_???) the same as
	for Input.whichButton().
	*/
	public int getButton() {
		return Input.whichButton(_awtButtons);
	}

	/**
	Gets the current modifier state of the keyboard regardless
	of source display.
	@return Modifier key state (Input.BUTTON_???) the same as
	for Input.whichModifier().
	*/
	public int getModifier() {
		return Input.whichModifier(_awtModifiers);
	}

	// Behavior implementation
	
	public void initialize() {
	
if(Debug.getEnabled()){
Debug.println("InputSensor.wakeup",
"WAKEUP:InputSensor:initialize:" +
" wakeup=" + _wakeup);}
 
   		// arm trigger
		wakeupOn(_wakeup);
	}
 	 		
	/**
	Wakeup events are assumed to be only AWT events.
	*/
	public void processStimulus(Enumeration criteria) {
		AWTEvent[] awtEvents = null;
	
	 	// search only for AWT events
		WakeupCriterion criterion;
		while(criteria.hasMoreElements()) {
			criterion = (WakeupCriterion)criteria.nextElement();
			
if(Debug.getEnabled()){
Debug.println("InputSensor.wakeup",
"WAKEUP:InputSensor:processStimulus:" +
" criterion=" + criterion);}
			
			// if not an AWT event ignore it
			if(!(criterion instanceof WakeupOnAWTEvent))
				continue;
			
			awtEvents =
			 ((WakeupOnAWTEvent)criterion).getAWTEvent();
			
			// update state by event and type
			AWTEvent awtEvent;
			InputEvent event;
			for(int eventI=0; eventI<awtEvents.length; eventI++) {
				awtEvent = awtEvents[eventI];
				
if(Debug.getEnabled()){
Debug.println("InputSensor.wakeup",
"WAKEUP:InputSensor:processStimulus:" +
" awtEvent=" + awtEvent);}

				// if not an input event ignore it
				if(!(awtEvent instanceof InputEvent)) continue;
				event = (InputEvent)awtEvent;

				// track button and modifier state
				if(event.getID()==
				 MouseEvent.MOUSE_PRESSED) {
					_awtButtons |= event.getModifiers() &
					 (InputEvent.BUTTON1_MASK |
					 InputEvent.BUTTON2_MASK |
					 InputEvent.BUTTON3_MASK);
				} else if(event.getID()==
				 MouseEvent.MOUSE_RELEASED) {
					_awtButtons &= ~(event.getModifiers() &
					 (InputEvent.BUTTON1_MASK |
					 InputEvent.BUTTON2_MASK |
					 InputEvent.BUTTON3_MASK));
				} else if(event.getID()==
				 KeyEvent.KEY_PRESSED) {
					_awtModifiers = event.getModifiers() &
					 (InputEvent.SHIFT_MASK |
					 InputEvent.CTRL_MASK |
					 InputEvent.ALT_MASK);
				} else if(event.getID()==
				 KeyEvent.KEY_RELEASED) {
					_awtModifiers = event.getModifiers() &
					 (InputEvent.SHIFT_MASK |
					 InputEvent.CTRL_MASK |
					 InputEvent.ALT_MASK);
				}
				
if(Debug.getEnabled()){
Debug.println("InputSensor.verbose",
"VERBOSE:InputSensor:processStimulus:" +
" awtFlgs=" + event.getModifiers() +
" awtBtns=" + _awtButtons +
" awtMods=" + _awtModifiers +
" btns=" + Input.whichButton(_awtButtons) +
" mods=" + Input.whichModifier(_awtModifiers) +
" display=" + _display +
" event=" + event
);}

				// if wrong display ignore event
				if(_display != null &&
				 event.getSource() != _display) {
				
if(Debug.getEnabled()){
Debug.println("InputSensor.verbose",
"REJECT:InputSensor:processStimulus:" +
" rejecting input event");}

					continue;
				}
				
if(Debug.getEnabled()){
Debug.println("InputSensor.verbose",
"ACCEPT:InputSensor:processStimulus:" +
" accepting input event");}

				// valid event, process it
				switch(event.getID()) {
					case MouseEvent.MOUSE_CLICKED:
						mouseClicked((MouseEvent)event);
						break;
					case MouseEvent.MOUSE_DRAGGED:
						mouseDragged((MouseEvent)event);
						break;
					case MouseEvent.MOUSE_MOVED:
						mouseMoved((MouseEvent)event);
						break;
					case MouseEvent.MOUSE_PRESSED:
						mousePressed((MouseEvent)event);
						break;
					case MouseEvent.MOUSE_RELEASED:
						mouseReleased((MouseEvent)event);
						break;
					case KeyEvent.KEY_PRESSED:
						keyPressed((KeyEvent)event);
						break;
					case KeyEvent.KEY_RELEASED:
						keyReleased((KeyEvent)event);
						break;
					default:
						System.out.println(
						 "Unexpected AWT event type...\n" +
						 event);
						break;
				}
			}
		}
		
		// rearm the trigger
	
if(Debug.getEnabled()){
Debug.println("InputSensor.wakeup",
"WAKEUP:InputSensor:processStimulus: wakeup=" + _wakeup);}
 
		wakeupOn(_wakeup);
	} 		
			
	// personal body ============================================

	/** Source display. */
	private Canvas3D _display;
	
	/** For AWT event monitoring. */
	private WakeupCondition _wakeup;
	
	/** Current mouse AWT button state. */
	private int _awtButtons = 0;
	
	/** Current keyboard AWT modifier state. */
	private int _awtModifiers = 0;

	/**
	Must be overidden by subclasses to establish which AWT
	events will be monitored by this sensor.
	@return OR of the monitored wakeup conditions.
	*/
	protected abstract WakeupCondition buildWakeup();

	// AWT event handlers
	
	protected void mouseClicked(MouseEvent event) {
if(Debug.getEnabled()){Debug.println("InputSensor",
"EVENT:InputSensor:mouseClicked:" + event);}
	}
	
	protected void mouseDragged(MouseEvent event) {
if(Debug.getEnabled()){Debug.println("InputSensor",
"EVENT:InputSensor:mouseDragged:" + event);}
	}
	
	protected void mouseMoved(MouseEvent event) {
if(Debug.getEnabled()){Debug.println("InputSensor",
"EVENT:InputSensor:mouseMoved:" + event);}
	}
	
	protected void mousePressed(MouseEvent event) {
if(Debug.getEnabled()){Debug.println("InputSensor",
"EVENT:InputSensor:mousePressed:" + event);}
	}
	
	protected void mouseReleased(MouseEvent event) {
if(Debug.getEnabled()){Debug.println("InputSensor",
"EVENT:InputSensor:mouseReleased:" + event);}
	}
	
	protected void keyPressed(KeyEvent event) {
if(Debug.getEnabled()){Debug.println("InputSensor",
"EVENT:InputSensor:keyPressed:" + event);}
	}
	
	protected void keyReleased(KeyEvent event) {
if(Debug.getEnabled()){Debug.println("InputSensor",
"EVENT:InputSensor:keyReleased:" + event);}
	}

}